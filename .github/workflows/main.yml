name: Main Flow

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - '**/*.md'

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  DOCKER_HUB_NAMESPACE: osuprun
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  set-vars:
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.vars.outputs.artifact_name }}
      artifact-version: ${{ steps.vars.outputs.artifact_version }}
      is-release-candidate: ${{ steps.vars.outputs.is_release_candidate }}
      is-snapshot: ${{ steps.vars.outputs.is_snapshot }}
      artifactory-repo: ${{ steps.vars.outputs.artifactory_repo }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle
      - name: Set Vars
        id: vars
        run: |
          ARTIFACT_VERSION=$(gradle properties -q | grep "version:" | awk '{print $2}')  
          echo "artifact_version=$ARTIFACT_VERSION" >> "$GITHUB_OUTPUT"

  build-jar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Build Jar
        run: ./gradlew bootJar
      - name: Upload jar artifact
        uses: actions/upload-artifact@v4
        with:
          name: boot_jar
          path: ppla-questions-backend/build/libs/*.jar
  buildx:
    runs-on: ubuntu-latest
    needs:
      - set-vars
      - build-jar
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download jar artifact
        uses: actions/download-artifact@v4
        with:
          name: boot_jar
          pattern: ppla-questions-backend-${{ needs.set-vars.outputs.artifact-version }}.jar
      - # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_HUB_NAMESPACE }}/ppla-questions-app
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=semver,pattern={{version}},value=v${{ needs.set-vars.outputs.artifact-version }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BOOT_JAR=ppla-questions-backend-${{ needs.set-vars.outputs.artifact-version }}.jar
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
